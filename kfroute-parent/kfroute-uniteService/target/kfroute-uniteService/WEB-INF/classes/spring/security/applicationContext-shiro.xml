<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd"
	default-autowire="byName"  default-lazy-init="true">

	<description>Shiro安全配置</description>

	<!-- 扫描 --> 
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>
	
	<!-- 項目自定义的Realm 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="shiroDbRealm" class="com.melinkr.micro.shiro.SSORealm">
	</bean>
	
	<!-- 用户授权信息Cache, 采用EhCache，需要的话就配置上此信息 -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:spring/security/ehcache-shiro.xml" />
    </bean>

	<!-- Shiro Filter -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 --> 
	<bean id="shiroFilter" class="com.melinkr.micro.shiro.SSOShiroFilterFactoryBean">
		 <!-- Shiro的核心安全接口,这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		 <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
		<property name="loginUrl" value="http://127.0.0.1:7002/sso?service=http://127.0.0.1:7003/kfroute" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->  
	   
	    <!-- <property name="successUrl" value="/system/main"/> -->  
	   
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后未登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp --> 
		
		<!--  <property name="unauthorizedUrl" value="/"/>   -->
	    
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter --> 
		<!--  
		 * @see   /admins/**=anon             无参,表示可匿名使用,可以理解为匿名用户或游客
		 * @see   /admins/user/**=authc       无参,表示需认证才能使用 
		 * @see   /admins/user/**=authcBasic  无参,表示httpBasic认证 
		 * @see   /admins/user/**=user        无参,表示必须存在用户,当登入操作时不做检查 
		 * @see   /admins/user/**=ssl         无参,表示安全的URL请求,协议为https 
		-->
		<property name="successUrl" value="/" />
		<property name="filterChainDefinitions">
			<value>
				/captcha-image.do = anon
				/resources/** = anon
				/service/** = anon
				/static/** = anon
				/anon/** = anon
				/** = user	
			</value>
		</property>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<bean id="authRemoteService" class="com.melinkr.micro.auth.service.AuthRemoteService" />
	<bean id="authRemoteAction" class="cn.melinkr.uniteInter.shiro.AuthRemoteAction" />
</beans>